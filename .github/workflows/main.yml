# Debugging
# https://docs.github.com/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging#enabling-step-debug-logging
name: FastAPI CI/CD
run-name: ${{ github.actor }} is learning GitHub Actions

on:
  # Trigger the workflow on push
  push:
    branches:
      # Push events on main branch
      - main

# The Job defines a series of steps that execute on the same runner.
jobs:

  CI:
    # Define the runner used in the workflow
    runs-on: ubuntu-latest
    steps:
      # Check out repo so our workflow can access it
      - uses: actions/checkout@v3
      # Step-1 Setup Python
      # This action sets up a Python environment for use in actions
      # https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.6
          cache: "pip"
      # Step-2 Install environment
      - name: Install environment
        run: pip3 install virtualenv
      # Step-3 Using pip to get cache location
#      - name: Get pip cache dir
#        id: pip-cache
#        run: |
#          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      # Step-4 Cache
      # https://github.com/actions/cache/blob/main/examples.md#python---pip
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-venv # name for referring later
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      # Step-5 Build a Virtual ENV
      - name: Activate Virtual ENV
        # if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
      # Step-6 Run Tests
      - name: Run Tests
        # Note that you have to activate the virtualenv in every ste p
        # because GitHub actions doesn't preserve the environment
        run: |
          source venv/bin/activate
          pytest
        # run: . source venv/bin/activate && pytest
      # Step-7
      - name: Create folder of dependencies
        run: pip install -t lib -r requirements.txt
      # Step-8
      - name: Add API files to Zip file
        run: cd ./lib && zip -r9 ../api.zip .
      # Step-9
      - name: Add app folder to zip file
        run: cd ./app && zip -g ../api.zip -r .
      # Step-10
      - name: Upload zip file artifact
        # uploads artifacts from your workflow allowing you to share data between jobs
        # Store data once a workflow is complete
        uses: actions/upload-artifact@v3
        with:
          name: api
          path: api.zip
  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    # The reference of the event (i.e., the branch name) is equal to "refs/heads/main", and The event name is "push"
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Check out repo
        # Check out repo so our workflow can access it
        uses: actions/checkout@v3
      - name: Download Lambda app.zip
        uses: actions/download-artifact@v3
        id: download
        with:
          name: api
      - name: Echo download path
        run: ls ${{ steps.download.outputs.download-path }}
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_SECRET_DEFAULT_REGION }}
      - name: Upload zip file to S3
        run: aws s3 cp api.zip s3://${{ secrets.AWS_BUCKET }}/api.zip
      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name fastapi-lambda-develop --s3-bucket ${{ secrets.AWS_BUCKET }} --s3-key api.zip
