# Debugging
# https://docs.github.com/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging#enabling-step-debug-logging
name: FastAPI CI/CD
run-name: ${{ github.actor }} is learning GitHub Actions

on:
  # Trigger the workflow on push
  push:
    branches:
      # Push events on main branch
      - main

# The Job defines a series of steps that execute on the same runner.
jobs:

  CI:
    # Define the runner used in the workflow
    runs-on: ubuntu-latest
    steps:
      # Check out repo so our workflow can access it
      - uses: actions/checkout@v3

      # Step-1 Setup Python
      - name: Set up Python
        # This action sets up a Python environment for use in actions
        # https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.6
          # optional: architecture: x64 x64 or x86. Defaults to x64 if not specified

      # Step-2 Install Python Virtual ENV
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      # Step-3 Setup Virtual ENV
      # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
      - name:  Virtual ENV
        # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-the-cache-action
        uses: actions/cache@v3
        id: cache-venv # name for referring later
        with:
          path: venv # what we cache: the Virtual ENV
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      # Step-4 Build a Virtual ENV, but only if it doesn't already exist
      - name: Activate Virtual ENV
        run: python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Run Tests
        # Note that you have to activate the virtualenv in every step
        # because GitHub actions doesn't preserve the environment
        run: . venv/bin/activate && pytest
      - name: Create archive of dependencies
        run: |
          cd ./venv/lib/python3.10/site-packages
          zip -r9 ../../../../api.zip .
      - name: Add API files to Zip file
        run: cd ./api && zip -g ../api.zip -r .
      - name: Upload zip file artifact
        # uploads artifacts from your workflow allowing you to share data between jobs
        # Store data once a workflow is complete
        uses: actions/upload-artifact@v3
        with:
          name: api
          path: api.zip

  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    # The reference of the event (i.e., the branch name) is equal to "refs/heads/main", and The event name is "push"
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Check out repo
        # Check out repo so our workflow can access it
        uses: actions/checkout@v3
      - name: Download Lambda api.zip
        uses: actions/download-artifact@v3
        id: download
        with:
          name: api
      - name: Echo download path
        run: echo ${{ steps.download.outputs.download-path }}
      - name: Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # optional: defaults to us-east-1
          AWS_REGION: ${{ secrets.AWS_SECRET_DEFAULT_REGION }}
          # optional: defaults to entire repository
          # SOURCE_DIR: '/home/runner/work/fastapi_sand_box/fastapi_sand_box/api.zip'
          SOURCE_DIR: '/fastapi_sand_box/'

#  CD:
#    runs-on: ubuntu-latest
#    needs: [CI]
#    # The reference of the event (i.e., the branch name) is equal to "refs/heads/main", and The event name is "push"
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#    steps:
#      - name: Install AWS CLI
#        uses: unfor19/install-aws-cli-action@v1
#        with:
#          version: 2
#          verbose: true
#          arch: amd64
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#      - name: Download Lambda api.zip
#        uses: actions/download-artifact@v3
#        with:
#          name: api
#          verbose: false
#      - name: Upload to S3
#        run: aws s3 cp api.zip s3://fastapi-lambda-develop/api.zip
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#      - name: Deploy new Lambda
#        run: aws lambda update-function-code --function-name fastapi-lambda-develop --s3-bucket fastapi-lambda-develop --s3-key api.zip
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}